use std::hint::unreachable_unchecked;

#[inline]
pub const fn file(n: u8) -> u64 {
    0x101010101010101 << n
}

#[inline]
pub const fn rank(n: u8) -> u64 {
    0xff << (8 * n)
}

pub fn transpose(mut x: u64) -> u64 {
    u64::from_be_bytes([
        col(x, 0),
        col(x, 1),
        col(x, 2),
        col(x, 3),
        col(x, 4),
        col(x, 5),
        col(x, 6),
        col(x, 7),
    ])
}

pub fn invert_u64(mut x: u64) -> u64 {
    x = x >> 32 | (x << 32);

    let mask = 0x0000ffff0000ffff;
    x = (x >> 16) & mask | (x & mask) << 16;

    let mask = 0x00ff00ff00ff00ff;
    x = (x >> 8) & mask | (x & mask) << 8;

    let mask = 0x0f0f0f0f0f0f0f0f;
    x = (x >> 4) & mask | (x & mask) << 4;

    let mask = 0x3333333333333333;
    x = (x >> 2) & mask | (x & mask) << 2;

    let mask = 0x5555555555555555;
    x = (x >> 1) & mask | (x & mask) << 1;

    x
}

pub fn col2(x: u64, i: u8) -> u8 {
    (x & file(i))
        .to_le_bytes()
        .iter()
        .enumerate()
        .fold(0, |acc, (n, x)| x << n | acc)
}

pub fn col(x: u64, i: u8) -> u8 {
    let x = x
        .to_le_bytes()
        .map(|x| x >> i);

    let x = u64::from_le_bytes(x);
    match x & file(7) {
        0x000000000000000 => 0x0,
        0x000000000000001 => 0x1,
        0x000000000000100 => 0x2,
        0x000000000000101 => 0x3,
        0x000000000010000 => 0x4,
        0x000000000010001 => 0x5,
        0x000000000010100 => 0x6,
        0x000000000010101 => 0x7,
        0x000000001000000 => 0x8,
        0x000000001000001 => 0x9,
        0x000000001000100 => 0xa,
        0x000000001000101 => 0xb,
        0x000000001010000 => 0xc,
        0x000000001010001 => 0xd,
        0x000000001010100 => 0xe,
        0x000000001010101 => 0xf,
        0x000000100000000 => 0x10,
        0x000000100000001 => 0x11,
        0x000000100000100 => 0x12,
        0x000000100000101 => 0x13,
        0x000000100010000 => 0x14,
        0x000000100010001 => 0x15,
        0x000000100010100 => 0x16,
        0x000000100010101 => 0x17,
        0x000000101000000 => 0x18,
        0x000000101000001 => 0x19,
        0x000000101000100 => 0x1a,
        0x000000101000101 => 0x1b,
        0x000000101010000 => 0x1c,
        0x000000101010001 => 0x1d,
        0x000000101010100 => 0x1e,
        0x000000101010101 => 0x1f,
        0x000010000000000 => 0x20,
        0x000010000000001 => 0x21,
        0x000010000000100 => 0x22,
        0x000010000000101 => 0x23,
        0x000010000010000 => 0x24,
        0x000010000010001 => 0x25,
        0x000010000010100 => 0x26,
        0x000010000010101 => 0x27,
        0x000010001000000 => 0x28,
        0x000010001000001 => 0x29,
        0x000010001000100 => 0x2a,
        0x000010001000101 => 0x2b,
        0x000010001010000 => 0x2c,
        0x000010001010001 => 0x2d,
        0x000010001010100 => 0x2e,
        0x000010001010101 => 0x2f,
        0x000010100000000 => 0x30,
        0x000010100000001 => 0x31,
        0x000010100000100 => 0x32,
        0x000010100000101 => 0x33,
        0x000010100010000 => 0x34,
        0x000010100010001 => 0x35,
        0x000010100010100 => 0x36,
        0x000010100010101 => 0x37,
        0x000010101000000 => 0x38,
        0x000010101000001 => 0x39,
        0x000010101000100 => 0x3a,
        0x000010101000101 => 0x3b,
        0x000010101010000 => 0x3c,
        0x000010101010001 => 0x3d,
        0x000010101010100 => 0x3e,
        0x000010101010101 => 0x3f,
        0x001000000000000 => 0x40,
        0x001000000000001 => 0x41,
        0x001000000000100 => 0x42,
        0x001000000000101 => 0x43,
        0x001000000010000 => 0x44,
        0x001000000010001 => 0x45,
        0x001000000010100 => 0x46,
        0x001000000010101 => 0x47,
        0x001000001000000 => 0x48,
        0x001000001000001 => 0x49,
        0x001000001000100 => 0x4a,
        0x001000001000101 => 0x4b,
        0x001000001010000 => 0x4c,
        0x001000001010001 => 0x4d,
        0x001000001010100 => 0x4e,
        0x001000001010101 => 0x4f,
        0x001000100000000 => 0x50,
        0x001000100000001 => 0x51,
        0x001000100000100 => 0x52,
        0x001000100000101 => 0x53,
        0x001000100010000 => 0x54,
        0x001000100010001 => 0x55,
        0x001000100010100 => 0x56,
        0x001000100010101 => 0x57,
        0x001000101000000 => 0x58,
        0x001000101000001 => 0x59,
        0x001000101000100 => 0x5a,
        0x001000101000101 => 0x5b,
        0x001000101010000 => 0x5c,
        0x001000101010001 => 0x5d,
        0x001000101010100 => 0x5e,
        0x001000101010101 => 0x5f,
        0x001010000000000 => 0x60,
        0x001010000000001 => 0x61,
        0x001010000000100 => 0x62,
        0x001010000000101 => 0x63,
        0x001010000010000 => 0x64,
        0x001010000010001 => 0x65,
        0x001010000010100 => 0x66,
        0x001010000010101 => 0x67,
        0x001010001000000 => 0x68,
        0x001010001000001 => 0x69,
        0x001010001000100 => 0x6a,
        0x001010001000101 => 0x6b,
        0x001010001010000 => 0x6c,
        0x001010001010001 => 0x6d,
        0x001010001010100 => 0x6e,
        0x001010001010101 => 0x6f,
        0x001010100000000 => 0x70,
        0x001010100000001 => 0x71,
        0x001010100000100 => 0x72,
        0x001010100000101 => 0x73,
        0x001010100010000 => 0x74,
        0x001010100010001 => 0x75,
        0x001010100010100 => 0x76,
        0x001010100010101 => 0x77,
        0x001010101000000 => 0x78,
        0x001010101000001 => 0x79,
        0x001010101000100 => 0x7a,
        0x001010101000101 => 0x7b,
        0x001010101010000 => 0x7c,
        0x001010101010001 => 0x7d,
        0x001010101010100 => 0x7e,
        0x001010101010101 => 0x7f,
        0x100000000000000 => 0x80,
        0x100000000000001 => 0x81,
        0x100000000000100 => 0x82,
        0x100000000000101 => 0x83,
        0x100000000010000 => 0x84,
        0x100000000010001 => 0x85,
        0x100000000010100 => 0x86,
        0x100000000010101 => 0x87,
        0x100000001000000 => 0x88,
        0x100000001000001 => 0x89,
        0x100000001000100 => 0x8a,
        0x100000001000101 => 0x8b,
        0x100000001010000 => 0x8c,
        0x100000001010001 => 0x8d,
        0x100000001010100 => 0x8e,
        0x100000001010101 => 0x8f,
        0x100000100000000 => 0x90,
        0x100000100000001 => 0x91,
        0x100000100000100 => 0x92,
        0x100000100000101 => 0x93,
        0x100000100010000 => 0x94,
        0x100000100010001 => 0x95,
        0x100000100010100 => 0x96,
        0x100000100010101 => 0x97,
        0x100000101000000 => 0x98,
        0x100000101000001 => 0x99,
        0x100000101000100 => 0x9a,
        0x100000101000101 => 0x9b,
        0x100000101010000 => 0x9c,
        0x100000101010001 => 0x9d,
        0x100000101010100 => 0x9e,
        0x100000101010101 => 0x9f,
        0x100010000000000 => 0xa0,
        0x100010000000001 => 0xa1,
        0x100010000000100 => 0xa2,
        0x100010000000101 => 0xa3,
        0x100010000010000 => 0xa4,
        0x100010000010001 => 0xa5,
        0x100010000010100 => 0xa6,
        0x100010000010101 => 0xa7,
        0x100010001000000 => 0xa8,
        0x100010001000001 => 0xa9,
        0x100010001000100 => 0xaa,
        0x100010001000101 => 0xab,
        0x100010001010000 => 0xac,
        0x100010001010001 => 0xad,
        0x100010001010100 => 0xae,
        0x100010001010101 => 0xaf,
        0x100010100000000 => 0xb0,
        0x100010100000001 => 0xb1,
        0x100010100000100 => 0xb2,
        0x100010100000101 => 0xb3,
        0x100010100010000 => 0xb4,
        0x100010100010001 => 0xb5,
        0x100010100010100 => 0xb6,
        0x100010100010101 => 0xb7,
        0x100010101000000 => 0xb8,
        0x100010101000001 => 0xb9,
        0x100010101000100 => 0xba,
        0x100010101000101 => 0xbb,
        0x100010101010000 => 0xbc,
        0x100010101010001 => 0xbd,
        0x100010101010100 => 0xbe,
        0x100010101010101 => 0xbf,
        0x101000000000000 => 0xc0,
        0x101000000000001 => 0xc1,
        0x101000000000100 => 0xc2,
        0x101000000000101 => 0xc3,
        0x101000000010000 => 0xc4,
        0x101000000010001 => 0xc5,
        0x101000000010100 => 0xc6,
        0x101000000010101 => 0xc7,
        0x101000001000000 => 0xc8,
        0x101000001000001 => 0xc9,
        0x101000001000100 => 0xca,
        0x101000001000101 => 0xcb,
        0x101000001010000 => 0xcc,
        0x101000001010001 => 0xcd,
        0x101000001010100 => 0xce,
        0x101000001010101 => 0xcf,
        0x101000100000000 => 0xd0,
        0x101000100000001 => 0xd1,
        0x101000100000100 => 0xd2,
        0x101000100000101 => 0xd3,
        0x101000100010000 => 0xd4,
        0x101000100010001 => 0xd5,
        0x101000100010100 => 0xd6,
        0x101000100010101 => 0xd7,
        0x101000101000000 => 0xd8,
        0x101000101000001 => 0xd9,
        0x101000101000100 => 0xda,
        0x101000101000101 => 0xdb,
        0x101000101010000 => 0xdc,
        0x101000101010001 => 0xdd,
        0x101000101010100 => 0xde,
        0x101000101010101 => 0xdf,
        0x101010000000000 => 0xe0,
        0x101010000000001 => 0xe1,
        0x101010000000100 => 0xe2,
        0x101010000000101 => 0xe3,
        0x101010000010000 => 0xe4,
        0x101010000010001 => 0xe5,
        0x101010000010100 => 0xe6,
        0x101010000010101 => 0xe7,
        0x101010001000000 => 0xe8,
        0x101010001000001 => 0xe9,
        0x101010001000100 => 0xea,
        0x101010001000101 => 0xeb,
        0x101010001010000 => 0xec,
        0x101010001010001 => 0xed,
        0x101010001010100 => 0xee,
        0x101010001010101 => 0xef,
        0x101010100000000 => 0xf0,
        0x101010100000001 => 0xf1,
        0x101010100000100 => 0xf2,
        0x101010100000101 => 0xf3,
        0x101010100010000 => 0xf4,
        0x101010100010001 => 0xf5,
        0x101010100010100 => 0xf6,
        0x101010100010101 => 0xf7,
        0x101010101000000 => 0xf8,
        0x101010101000001 => 0xf9,
        0x101010101000100 => 0xfa,
        0x101010101000101 => 0xfb,
        0x101010101010000 => 0xfc,
        0x101010101010001 => 0xfd,
        0x101010101010100 => 0xfe,
        0x101010101010101 => 0xff,
        _ => unreachable!(),
    }
}

pub const fn invert(mut x: u8) -> u8 {
    x = x >> 4 | (x << 4);

    let mask = 0x33;
    x = (x >> 2) & mask | (x & mask) << 2;

    let mask = 0x55;
    x = (x >> 1) & mask | (x & mask) << 1;

    x
}

pub fn debug(x: u64) {
    for i in 0..8 {
        for j in 0..8 {
            print!("{}", (x >> (i * 8)) >> j & 1);
        }
        println!();
    }
    println!();
}

#[test]
fn col_test() {
    let x = 0x3284923439412;
    debug(x);
    println!("{:#010b}", col2(x, 1));
    //assert_eq!(col2(x, 1), 0b01001101);
}

#[test]
fn transpose_test() {
    let x = 0x3284923439412;
    debug(x);
    debug(transpose(x));
}
